0.923*30
0.92*30
9*1500
1800*2.50
1800*2.750
1500/200
7.5*1800
770/12
12/770
77*.015
240*0.015
# input parameters
r<- 0.1
k<- 300
totT <-100
initialN <-3
logisticgrowth <- function (myR,myK,myN) {
New N <-myN+myR*myN*(1-myN/myK) }
# Loop
N <- rep(x=0, times= totT)
N[1] <- initialN
N[2] <- N[1] + r*N[1]*(1-N[1]/k)
N[3] <- N[2] + r*N[2]*(1-N[2]/k)
for(iT in 2:totT) {N[iT] <- logisticgrowth(myR=r, myK=k, myN=N[iT-1]}
plot(x=1:totT, y=N, type=“1”)
# input parameters
r<- 0.1
k<- 300
totT <-100
initialN <-3
logisticgrowth <- function(myR,myK,myN) {
New N <-myN+myR*myN*(1-myN/myK) }
# Loop
N <- rep(x=0, times= totT)
N[1] <- initialN
N[2] <- N[1] + r*N[1]*(1-N[1]/k)
N[3] <- N[2] + r*N[2]*(1-N[2]/k)
for(iT in 2:totT) {N[iT] <- logisticgrowth(myR=r, myK=k, myN=N[iT-1]}
plot(x=1:totT, y=N, type=“1”)
# input parameters
r<- 0.1
k<- 300
totT <-100
initialN <-3
logisticgrowth <- function(myR,myK,myN){
New N <-myN+myR*myN*(1-myN/myK) }
# Loop
N <- rep(x=0, times= totT)
N[1] <- initialN
N[2] <- N[1] + r*N[1]*(1-N[1]/k)
N[3] <- N[2] + r*N[2]*(1-N[2]/k)
for(iT in 2:totT) {N[iT] <- logisticgrowth(myR=r, myK=k, myN=N[iT-1]}
plot(x=1:totT, y=N, type=“1”)
# input parameters
r<- 0.1
k<- 300
totT <-100
initialN <-3
logisticgrowth <- function(myR,myK,myN){
NewN <-myN+myR*myN*(1-myN/myK) }
# Loop
N <- rep(x=0, times= totT)
N[1] <- initialN
N[2] <- N[1] + r*N[1]*(1-N[1]/k)
N[3] <- N[2] + r*N[2]*(1-N[2]/k)
for(iT in 2:totT) {N[iT] <- logisticgrowth(myR=r, myK=k, myN=N[iT-1]}
plot(x=1:totT, y=N, type=“1”)
# input parameters
r<- 0.1
k<- 300
totT <-100
initialN <-3
logisticgrowth <- function(myR,myK,myN){
NewN <-myN+myR*myN*(1-myN/myK) }
# Loop
N <- rep(x=0, times= totT)
N[1] <- initialN
N[2] <- N[1] + r*N[1]*(1-N[1]/k)
N[3] <- N[2] + r*N[2]*(1-N[2]/k)
for(iT in 2:totT) {N[iT] <- logisticgrowth(myR=r, myK=k, myN=N[iT-1])
plot(x=1:totT, y=N, type=“1”)
plot(x=1:totT, y=N, type=“l”)
plot(x=1:totT, y=N)
rm(list=ls())
# input parameters
r<- 0.1
k<- 300
totT <-100
initialN <-3
logisticgrowth <- function(myR,myK,myN){
NewN <-myN+myR*myN*(1-myN/myK) }
# Loop
N <- rep(x=0, times= totT)
N[1] <- initialN
N[2] <- N[1] + r*N[1]*(1-N[1]/k)
N[3] <- N[2] + r*N[2]*(1-N[2]/k)
for(iT in 2:totT) N[iT] <- logisticgrowth(myR=r, myK=k, myN=N[iT-1])
plot(x=1:totT, y=N, type=“l”)
totT
N
plot(N)
plot(x=1:totT, y=N, type=“l”)
plot(x=c(1:totT), y=N, type=“l”)
plot(Ntype="l")
plot(N,type="l")
?plot
plot(1:totT,N)
plot(1:totT,N,type="l")
plot(1:totT,y=N,type="l")
plot(x=1:totT,y=N,type="l")
plot(x=1:totT, y=N, type=“l”)
plot(x=1:totT,y=N,type=“l”)
plot(x=1:totT,y=N,type="l")
#### Logistic Growth Model ####
###############################
### Inputs ###
r<-.01
K<-100
totT<-1000 # This could be a sequence from 1 to totT, but all we need is the total number.
initial.pop<-2
logistic.growth<-function(myr,myK,mytotT,myinitial){
myN<-numeric(mytotT)
# alternatively, myN<-rep(NA,mytotT)
myN[1]<-myinitial
for (i in 2:length(myN)){
myN[i]<-myN[i-1]+myr*myN[i-1]*(1-myN[i-1]/myK)
}
return(myN)
}
model.result<-logistic.growth(r,K,totT,initial.pop)
plot(model.result,type="l")
#Jessie Bunkley
#WILD 6770 - Plant Community Ecology
#R Intro Assignment
#1. Assign values r, K, and the first N
r=0.95
K=15
firstN=2
#2. Create a time vector
Time=seq(from = 1, to = 100, by=1)
Time
#3. Create an N vector with NAs
N=rep(NA,length(Time))
N[1]=firstN
#4. Create a logistic growth function
lg<-function(r,K,N){newN=N+r*N*(1-N/K)
return(newN)}
#5. Create a for() loop to step through time
for(i in 2:length(Time)) {N[i]=lg(r=r, K=K, N=N[i-1])}
#6. Graph the results
plot(Time, N, type="l")
r = 0.3
K = 400
initialN = 2
Time <- seq(1,100)
N <- rep(NA,length(Time))
N[1] = initialN
growth <- function(r,K,N){
updatedN = N +r*N*(1-N/K)
return(updatedN)
}
for(i in 2:length(Time)){
N[i] = growth(r=r,K=K,N=N[i-1])
}
plot(Time,N)
#############################
### LOGISTIC GROWTH MODEL ###
#############################
# Inputs
r <- .1
K <- 200
initialN <- 2
totT <- 100
# Define logistic growth function
logisticGrowth <- function(myR,myK,myN){
newN <- myN +myR*myN*(1-myN/myK)
return(newN)
}
# Do the loop
N <- rep(x=0,times=totT)
N[1] <- initialN
for(iT in 2:totT){
N[iT] <- logisticGrowth(myR=r, myK=K, myN=N[iT-1]  )
}
# Graph it
plot(x=1:totT,y=N,type="l")
18*25
?mean
62/70
64/70
63/70
50:70/70
cbind(50:70,50:70/70)
readRDS("C:\\Users\\adler\\Downloads\\TotalSagebrushAreas.rds")
readRDS("C:\\Users\\adler\\Downloads\\TotalSagbrushAreas.rds")
D <- readRDS("C:\\Users\\adler\\Downloads\\TotalSagbrushAreas.rds")
D <-subset(D,type=="all")
D
D <-subset(D,pred=pres_25)
D
D <-subset(D,pred=="pres_25")
D
63600/sum(D$total)
2+2
A <- 2
B <- 10
C<-B*A
print(C)
13000/1.44
paste("hello number", A, "!",sep="")
A = 10
paste("hello number", A, "!",sep="")
paste("hello number ", A, "!",sep="")
saveLabel=expression(paste("hello number ", m@-2, "!",sep=""))
saveLabel=expression(paste("hello number ", m^-2, "!",sep=""))
saveLabel
plot(1:10,1:10,xlab=saveLabel)
saveLabel=expression(paste("hello number ", "m^-2", "!",sep=""))
plot(1:10,1:10,xlab=saveLabel)
saveLabel=expression(paste("hello number ", %sigma^2, "!",sep=""))
saveLabel=expression(paste("hello number ", sigma^2, "!",sep=""))
plot(1:10,1:10,xlab=saveLabel)
source('~/.active-rstudio-document', echo=TRUE)
source('H:/idahochart/ipm/genet_nbhood_annuli_Other.r', echo=TRUE)
doYear
doQuad
source('H:/idahochart/ipm/genet_nbhood_annuli_Other.r', echo=TRUE)
doYear
doQuad
rm(list=ls())
gc()
source('H:/idahochart/ipm/genet_nbhood_annuli_Other.r', echo=TRUE)
source('H:/idahochart/ipm/genet_nbhood_annuli_Other.r', echo=TRUE)
source('H:/idahochart/ipm/genet_nbhood_annuli_Other.r', echo=TRUE)
source('H:/idahochart/ipm/genet_nbhood_annuli_Other.r', echo=TRUE)
source('H:/idahochart/ipm/genet_nbhood_annuli_Other.r', echo=TRUE)
library(rgeos)
library(rgdal)o
library(mapdata)
library(maptools)
x.map = map("worldHires", "Norway", fill=TRUE, col="transparent", plot=FALSE, xlim=c(0,40), ylim=c(50,73))
x.sp = map2SpatialPolygons(x.map, x.map$names, proj4string=CRS("+init=epsg:4326"))
plot(x.sp)            # *Looks* OK
gPointOnSurface(x.sp) # Error: TopologyException: side location conflict at 3.97911 0.0769463
gIsValid(x.sp)        # Error: Self-intersection at or near point 27.9364 70.0864
points(27.9364, 70.0864, col="red", pch=19)
install.packages("rgdal")
library(rgeos)
library(rgdal)
library(mapdata)
library(maptools)
x.map = map("worldHires", "Norway", fill=TRUE, col="transparent", plot=FALSE, xlim=c(0,40), ylim=c(50,73))
x.sp = map2SpatialPolygons(x.map, x.map$names, proj4string=CRS("+init=epsg:4326"))
install.packages("mapdata")
install.packages("mapdata")
library(rgeos)
library(rgdal)o
library(mapdata)
library(maptools)
x.map = map("worldHires", "Norway", fill=TRUE, col="transparent", plot=FALSE, xlim=c(0,40), ylim=c(50,73))
x.sp = map2SpatialPolygons(x.map, x.map$names, proj4string=CRS("+init=epsg:4326"))
library(rgeos)
library(rgdal)
library(mapdata)
library(maptools)
x.map = map("worldHires", "Norway", fill=TRUE, col="transparent", plot=FALSE, xlim=c(0,40), ylim=c(50,73))
x.sp = map2SpatialPolygons(x.map, x.map$names, proj4string=CRS("+init=epsg:4326"))
plot(x.sp)            # *Looks* OK
gPointOnSurface(x.sp) # Error: TopologyException: side location conflict at 3.97911 0.0769463
gIsValid(x.sp)        # Error: Self-intersection at or near point 27.9364 70.0864
points(27.9364, 70.0864, col="red", pch=19)
source('H:/idahochart_remapping/ipm/genet_nbhood_annuli_Other.r', echo=TRUE)
source('H:/idahochart_remapping/ipm/genet_nbhood_annuli_Other.r', echo=TRUE)
source('H:/idahochart_remapping/ipm/genet_nbhood_annuli_Other.r', echo=TRUE)
10%in%c(0,5,10,14,20)
which(10%in%c(0,5,10,14,20))
10%in%c(0,5,14,20)
rm(list=ls())
source('C:/Users/adler/Box Sync/teaching/PlantCommEcol/resource_ratio/ResRatio_1R_2spp_demo.r', echo=TRUE)
source('C:/Users/adler/Box Sync/teaching/PlantCommEcol/resource_ratio/ResRatio_2spp_demo.r', echo=TRUE)
178+165.08
1440/20
72/16
13.1*15
source('H:/idahochart_remapping/scripts/checkGeometry.r')
source('H:/idahochart_remapping/scripts/checkGeometry.r')
source('~/.active-rstudio-document')
### Community Ecology Assignment #1 Logistic growth
# Clears Console and clears Graphs
#cat("\014"); graphics.off(); rm(list=ls(all=T));
r=0.25
K=200
time = as.data.frame(seq(1:100)); colnames(time) = c("time")
N = matrix("0", length(time$time))
N[1,1] = 2
N = as.numeric(N)
new = cbind(time,N)
obs <- length(new$N)
for(i in 2:obs){
new$N[i] = new$N[i-1] +r*new$N[i-1]*(1-new$N[i-1]/K)
}
plot(new$time,new$N,type="l")
###Logistic Model###
logistic.growth<-function (growth.rate, carrying.capacity, initial.population){
r = growth.rate #shorter variables = easier math
K = carrying.capacity
totalTime = 100 #time steps to run model
time = 1:totalTime #create time vector
N = numeric(totalTime) #create empty vector to place calculations in
N[1] = initial.population #set first element to initial N
for (i in 1:99) {
N[i+1] = N[i]+((r*N[i]*(K-N[i]))/K) #logistic growth function
}
print(N)
plot(time,N)
}
r = 0.5 #per capita growth rate
K = 500 #carrying capacity
initialN = 2 #initial population
logistic.growth(r,K,initialN) #run the function
###Logistic Model###
logistic.growth<-function (growth.rate, carrying.capacity, initial.population){
r = growth.rate #shorter variables = easier math
K = carrying.capacity
totalTime = 100 #time steps to run model
time = 1:totalTime #create time vector
N = numeric(totalTime) #create empty vector to place calculations in
N[1] = initial.population #set first element to initial N
for (i in 1:99) {
N[i+1] = N[i]+((r*N[i]*(K-N[i]))/K) #logistic growth function
}
print(N)
plot(time,N)
}
r = 0.5 #per capita growth rate
K = 500 #carrying capacity
initialN = 2 #initial population
logistic.growth(r,K,initialN) #run the function
###Logistic Model###
logistic.growth<-function (growth.rate, carrying.capacity, initial.population){
r = growth.rate #shorter variables = easier math
K = carrying.capacity
totalTime = 100 #time steps to run model
time = 1:totalTime #create time vector
N = numeric(totalTime) #create empty vector to place calculations in
N[1] = initial.population #set first element to initial N
for (i in 1:99) {
N[i+1] = N[i]+((r*N[i]*(K-N[i]))/K) #logistic growth function
}
print(N)
plot(time,N)
}
r = 0.5 #per capita growth rate
K = 500 #carrying capacity
initialN = 2 #initial population
logistic.growth(r,K,initialN) #run the function
###Logistic Model###
logistic.growth<-function (growth.rate, carrying.capacity, initial.population){
r = growth.rate #shorter variables = easier math
K = carrying.capacity
totalTime = 100 #time steps to run model
time = 1:totalTime #create time vector
N = numeric(totalTime) #create empty vector to place calculations in
N[1] = initial.population #set first element to initial N
for (i in 1:99) {
N[i+1] = N[i]+((r*N[i]*(K-N[i]))/K) #logistic growth function
}
print(N)
x11()
plot(time,N)
}
r = 0.5 #per capita growth rate
K = 500 #carrying capacity
initialN = 2 #initial population
logistic.growth(r,K,initialN) #run the function
Time = seq(1,30, by=1)
N = rep(1:30)
N[1]= 2
#Carrying capacity (K)
K = 10
# Population growth rate (r)
r = 1
for(i in 1:29)
{
x[i] = r*N[i]*((K-N[i])/K)
N[i+1]=x[i] + N[i]
}
print(x)
print (N)
source('C:/temp/AS1 logGrowth.R')
## WILD 6770 ##############################################
## Introduction to R ######################################
###########################################################
## logistic growth function ##
# set your parameters
K=27 # carrying capacity
r=0.3 # growth rate between
T=100 # time steps
N0=2 # set initial population size
# create a dataframe for population growth logG
# column 1 Time, column 2 population size
logG=as.data.frame(cbind(Time=1:T, N=rep(0,T)))
logG$N[1]=N0
## create a logistic groth function
log.growth=function(r,K,N){ # r,K,N are input variables
N.i=N+r*N*(1-N/K) # this is the logistic growth function
return(N.i)
}
## create for loop to calculate N for each time step
for (i in 2:T){ # calculation starts at timestep 2
logG$N[i]=log.growth(r,K,logG$N[i-1]) # calls log.growth fct
}
plot(logG,type="l")
logG
plot(logG)
plot(1:10, col=rgb(1, 0, 0, 0.5), pch=16)
points((1:10)+0.05, col=rgb(0, 0, 1, 0.5), pch=16)
?rgb
plot(1:10, col=rgb(0.5,0.5,0.5, 0.5), pch=16)
plot(rnorm(1000),rnorm(1000),col=rgb(0.5,0.5,0.5,0.5),pch=1)
plot(rnorm(1000),rnorm(1000),col=rgb(0.5,0.5,0.5,0.5),pch=16)
plot(rnorm(1000),rnorm(1000),col=rgb(0.5,0.5,0.5,0.25),pch=16)
x<-rbinom(10000,7,0.5)
x
pbinom(7,0,5)
?pbinom
mean(rbinom(10000,7,0.5))
pbinom(7,7,0.5)
pbinom(0,7,0.5)
table(rbinom(10000,7,0.5))
table(rbinom(21000,7,0.5))
table(rbinom(21000,1,0.5))
obs4<-10477
trials4<-21581
null4<-rep(NA,10000)
for(i in 1:10000){
tmp4<-rbinom(n=trials4,size=1,prob=0.5)
null4[i]<-sum(tmp==1)
}
p4=1-sum(obs4 >= null4)/10000
hist(null4,xlim=c(900,12000))
abline(v=obs4,col="blue")
xfold4=obs4/mean(null4)
p4
xfold4
obs4<-10477
trials4<-21581
null4<-rep(NA,10000)
for(i in 1:10000){
tmp4<-rbinom(n=trials4,size=1,prob=0.5)
null4[i]<-sum(tmp4==1)
}
p4=1-sum(obs4 >= null4)/10000
hist(null4,xlim=c(900,12000))
abline(v=obs4,col="blue")
xfold4=obs4/mean(null4)
p4
xfold4
A <- c(1,2,3)
sample(A,replace=T)
sample(A,replace=T)
sample(A,replace=T)
sample(A,replace=F)
sample(A,replace=F)
sample(A,replace=F)
sample(A,replace=F)
sample(A,replace=F)
1.175*229
Sys.getenv("PATH")
system('g++ -v')
system('where make')
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M))
file.create(M)
cat("\nCXXFLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
library(rstan)
update.packages()
4/7
4/7*2
setwd("C:/Repos/forecasting-dynamics-course")
5/7
5/7*2
63/70
49/70
50/70
rpois(1,c(1,1))
rpois(2,c(1,5))
rpois(2,c(1,5))
rpois(2,c(1,5))
?rbeta
library(mvtnorm)
# simulate fecundity and germination rates for one population
get_F_G = function(Nyears,F_mu,F_sigma,G_mu,G_sigma,covar){
vcov = cbind(c(F_sigma,covar),c(covar,G_sigma))
out = rmvnorm(Nyears, c(F_mu,G_mu),vcov)
out[,2] = exp(out[,2])/(1+exp(out[,2])) # inverse logit transform
return(out)
}
test = get_F_G(100, 50, 5, 0, 5, 0)
plot(test)
