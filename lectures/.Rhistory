rm(list=ls())
# An AR1 function to simulate popn growth
ar1 <- function(time_steps,initial_n,a,b,sigma){
N <- numeric(time_steps)
N[1] = initial_n
for(i in 2:time_steps){
N[i] = a + b*N[i-1] +rnorm(1,0,sigma)
}
return(N)
}
# Run it with no stochasticity, no density dependence
N <- ar1(time_steps=100, initial_n=1, a=2, b=1, sigma=0)
plot(N,type="l",xlab="Time")
# An AR1 function to simulate popn growth
ar1 <- function(time_steps,initial_n,a,b,sigma){
N <- numeric(time_steps)
N[1] = initial_n
for(i in 2:time_steps){
N[i] = a + b*N[i-1] +rnorm(1,0,sigma)
}
return(N)
}
# Run it with no stochasticity, no density dependence
N <- ar1(time_steps=100, initial_n=1, a=2, b=1, sigma=0)
plot(N,type="l",xlab="Time")
N <- ar1(time_steps=100, initial_n=1, a=2, b=1, sigma=2)
plot(N,type="l",xlab="Time")
N <- ar1(time_steps=100, initial_n=1, a=5, b=0.5, sigma=0)
plot(N,type="l",xlab="Time")
abline(h=5/0.5,col="red")
N <- ar1(time_steps=100, initial_n=1, a=5, b=0.5, sigma=1)
plot(N)
plot(N,type="l")
N <- ar1(time_steps=100, initial_n=1, a=2, b=0.5, sigma=1)
plot(exp(N),type="l",xlab="Time")
N <- ar1(time_steps=100, initial_n=1, a=5, b=0.5, sigma=0.5)
plot(exp(N),type="l",xlab="Time")
N <- ar1(time_steps=100, initial_n=1, a=2, b=0.1, sigma=0.5)
plot(exp(N),type="l",xlab="Time")
hist(N)
hist(exp(N))
rm(list=ls())
setwd("C:/Repos/forecasting-dynamics-course/lectures")
library(forecast)
library(ggplot2)
data = read.csv("./../data/portal_timeseries.csv", stringsAsFactors = FALSE)
head(data)
NDVI_ts = ts(data$NDVI, start = c(1992, 3), end = c(2014, 11), frequency = 12)
rain_ts = ts(data$rain, start = c(1992, 3), end = c(2014, 11), frequency = 12)
mean(NDVI_ts)
avg_forecast = meanf(NDVI_ts)
avg_forecast
# Look at the forecast object
str(avg_forecast)
# The expected value, or point forecast, is in $mean
avg_forecast$mean
# Better to use built-in plotting functions
plot(avg_forecast)
# Visualize
plot(NDVI_ts)
lines(avg_forecast$mean, col = 'red')
# Better to use built-in plotting functions
plot(avg_forecast)
# or
autoplot(avg_forecast)
# Change the number of time-steps in the forecast using h
avg_forecast = meanf(NDVI_ts, h = 50)
plot(avg_forecast)
avg_forecast <- meanf(NDVI_ts, level = c(50, 95))
avg_forecast
plot(avg_forecast)
arima_model = auto.arima(NDVI_ts, seasonal = FALSE)
arima_model
arima_forecast = forecast(arima_model)
plot(arima_forecast)
seasonal_arima_model = auto.arima(NDVI_ts)
seasonal_arima_model
seasonal_arima_forecast = forecast(seasonal_arima_model, h = 36, level = c(80, 99))
plot(seasonal_arima_forecast)
seasonal_arima_forecast = forecast(seasonal_arima_model, h = 100, level = c(80, 99))
plot(seasonal_arima_forecast)
library(dplyr)
library(tidyr)
head(data)
monsoon_data <- data %>%
separate(date, c("month", "day", "year"), sep = '/') %>%
filter(month %in% c(7, 8, 9)) %>%
group_by(year) %>%
summarize(monsoon_rain = sum(rain), monsoon_ndvi = mean(NDVI), monsoon_rodents = sum(rodents))
ggplot(monsoon_data, aes(x = monsoon_rain, y = monsoon_ndvi)) +
geom_point() +
geom_smooth(method = "lm")
rain_model = lm('monsoon_ndvi ~ monsoon_rain', data = monsoon_data)
predict(rain_model)
predict(rain_model,newdata=c(100,150,200,250))
predict(rain_model,newdata=data.frame(monsoon_rain=c(100,150,200,250)))
rain_forecast = forecast(rain_model, newdata = data.frame(monsoon_rain = c(120, 226, 176, 244)))
plot(rain_forecast)
rain_forecast
